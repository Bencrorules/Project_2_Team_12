Team 12 Project 2 Documentation

Hour Estimation:

	Pools:
		13: Medium difficulty AI
			1. If user inputs 2 in prompt, provide this difficulty
			2. Fire randomly until ship is hit
			3. If ship is hit, fire at adjacent spots
			4. If all spots on ship are hit, sink ship

		8: Easy difficulty AI
			1. If user inputs 1 in prompt, provide this difficulty
			2. Fire randomly at all times
			3. If all spots on ship are hit, sink ship

		5: Hard difficulty AI
			1. If user inputs 3 in prompt, provide this difficulty
			2. Fire at all spots where there is a ship
			3. If all spots on ship are hit, sink ship

		3: Restart game
			1. Create graphical button that says Restart game
			2. If button is pressed, provide prompt asking user if they are sure they want to restart
			3. Restart game to beginning if they want to restart

		2: Documentation
			1. User Agile Story Points method to calculate hours
			2. List requirements of custom Additions
			3. Write about software architecture of group 7

		1: Sounds
			1. Play sea_explosion.wav when ship is hit
			2. Play water_splash.mp3 when user misses ship
			3. Play alert.wav when user tries to attack a ship that was already hit

	It has been calculated that 1 story point is equal to .625 hours, or 38 minutes. This was calculated by dividing the
	total amount of hours worked by all members of the team, divided by the total amount of story points of the pools.
	The total amount of hours worked by all of us combined was 20 hours, and the total amount of story points is
	32 (13+8+5+3+2+1). 20/32 = .625 --> .625*60 minutes = 37.5 minutes. The average amount of hours worked per person
	is 5 hours (20 hours / 4 people).


Custom Additions to Project 1:
	To continue the progess that Group 7 made, we programmed the additions to their Battleship game in JavaScript.
	The features that we added include incorporating an AI opponent with easy, medium, and hard modes, sound effects
	for the various actions, the option to restart the game, and removal of the direction prompt when starting the game.

	The AI opponent has 3 modes:
		Easy: The AI randomly fires at the board in each turn
		Medium: The AI randomly fires at the board, but when a spot is hit, it aims at adjacently located spots until a
		ship is sunk. Then, the AI shoots randomly again.
		Hard: The AI fires at every spot where there's a ship.
	The user has the option to play against a human opponent or the AI. If the AI is chosen, they choose what difficulty
	they will play against, and then end up playing against it.

	Sound effects were added to the game using the imported files 'alert.wav', 'sea_explosion.wav', and 'water_splash.mp3'.
	'water_splash.mp3' produces a "splash" sound, and is played when someone missed a shot on the Battlefield board.
	'sea_explosion.wav' produces a sound similar to hitting metal, and is played when someone hits a ship on the Battlefield board.
	Lastly, 'alert.wav' produces a high-pitched ring sound, and is played when someone tries to attack a spot that was previously attacked.

	We added the ability to restart the game during the game, and after the game was completed. This button was added at the bottom in between
	the two boards. When this button is clicked, the user is prompted with "Are you sure you want to restart?" in case they accidentally clicked
	it. If they choose yes, they are redirected to the beginning of the process, which is the prompt on if they want to play against a human or AI.

	In Project 1, Group 7 had it so that the input choices of the direction of the ships when they were being placed was staying
	the whole game. We changed this so that it would be removed once it was not needed, which is when the user is placing a 1x1 ship.
	A 1x1 ship shouldn't have direction, so it isn't needed.

Software Architecture of Project 1:
	We believe that the software architecture that the Project 1 Team used to create their Battleship game was a 3-Tier Architecture.
	The three tiers can be broken up as the lowest being the Storage Tier, the middle being the Logic tier, and the highest being the
	interface tier. The storage tier is the base tier, and is where all the information about the players' ships, hits and misses,
	and the score is. These pieces of information are stored in various arrays in Array.js as well as other variables defined throughout
	the file system. This data is then moved and altered back and forth with the middle tier, which is the logic tier. The logic tier
	runs the game and has the logic for adding, hitting and missing ships. As players' commit actions in the games, data is generated and
	altered, which is communicated back to the storage tier. In short, the logic tier is the "brains" of the project and facilitates the
	game. Besides Arrays.js, the sound files, styles.css, and sounds.js, all the other files provide some sort of logic for the game.Finally,
	the top tier is the interface tier. The interface tier provides a visual representation of the logic being done on a web page using
	HTML, CSS, and JavaScript. The design of the interface is provided in the index.html and styles.css files, and the other files alter
	the interface when an action is committed. All three of the tiers interact and communicate with eachother to create a completed
	Battleship game.
